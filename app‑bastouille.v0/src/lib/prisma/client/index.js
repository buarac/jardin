
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/library.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}




  const path = require('path')

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CultureScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  img: 'img',
  categorie: 'categorie',
  modeRecolte: 'modeRecolte'
};

exports.Prisma.RecolteScalarFieldEnum = {
  id: 'id',
  cultureId: 'cultureId',
  date: 'date',
  poids: 'poids',
  quantite: 'quantite',
  meteoTemperature: 'meteoTemperature',
  meteoHumidite: 'meteoHumidite',
  meteoPression: 'meteoPression',
  meteoVent: 'meteoVent',
  meteoUV: 'meteoUV'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Categorie = exports.$Enums.Categorie = {
  fruit: 'fruit',
  legume: 'legume',
  aromatique: 'aromatique',
  fleur: 'fleur'
};

exports.ModeRecolte = exports.$Enums.ModeRecolte = {
  poids: 'poids',
  poids_unite: 'poids_unite'
};

exports.Prisma.ModelName = {
  Culture: 'Culture',
  Recolte: 'Recolte'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/sacha/github/jardin/app‑bastouille/src/lib/prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/sacha/github/jardin/app‑bastouille/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../../../prisma",
  "clientVersion": "6.13.0",
  "engineVersion": "361e86d0ea4987e9f53a565309b3eed797a6bcbd",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // Generate the Prisma client into the src/lib/prisma directory so it can be\n  // imported from your application code. You should avoid committing the\n  // generated client to version control as it is auto‑generated and\n  // regenerated whenever the schema changes. See the README for usage details.\n  output   = \"../src/lib/prisma/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n/// Enumeration of the available culture categories. Each culture belongs to a\n/// single category: fruit, legume (vegetable), aromatique (herb), or fleur\n/// (flower). Defining the enum here allows type safety in the database and\n/// throughout your TypeScript code.\nenum Categorie {\n  fruit\n  legume\n  aromatique\n  fleur\n}\n\n/// Enumeration of the different harvesting modes. `poids` indicates that a\n/// harvest is measured purely by its weight. `poids_unite` indicates that a\n/// harvest can be measured both by its weight and by the number of units\n/// collected (e.g. number of fruits or vegetables). When `poids_unite` is used\n/// the `Recolte.quantite` field should contain the unit count.\nenum ModeRecolte {\n  poids\n  poids_unite\n}\n\n/// Defines the Culture table. A culture describes a plant variety you grow\n/// (e.g. tomato, basil, rose). Each culture has a UUID primary key, a name,\n/// an image filename (PNG) used for display, a category, and a harvesting\n/// mode. A culture can have many harvests associated with it.\nmodel Culture {\n  /// Universally unique identifier for the culture\n  id          String      @id @default(uuid())\n  /// Human‑readable name of the culture\n  nom         String\n  /// Filename of the illustration PNG stored in the `public` folder\n  img         String\n  /// Category of the culture (fruit, legume, aromatique, fleur)\n  categorie   Categorie\n  /// How harvests for this culture are measured (poids or poids_unite)\n  modeRecolte ModeRecolte\n\n  /// List of harvests associated with this culture\n  recoltes Recolte[]\n}\n\n/// Defines the Recolte table. A recolte (harvest) records the details of a\n/// specific harvesting event: the culture harvested, the datetime, the\n/// weight harvested (in grams), and optionally the number of units harvested\n/// when the culture's mode is poids_unite. Weather data are stored\n/// alongside the harvest to help analyse growing conditions.\nmodel Recolte {\n  /// Universally unique identifier for the harvest\n  id               String   @id @default(uuid())\n  /// Foreign key referencing the culture that was harvested\n  cultureId        String\n  /// The culture associated with this harvest\n  culture          Culture  @relation(fields: [cultureId], references: [id])\n  /// Date and time of the harvest (ISO timestamp)\n  date             DateTime\n  /// Weight of the harvest in grams; should always be provided\n  poids            Float\n  /// Number of units harvested (only for cultures with modeRecolte=poids_unite)\n  quantite         Int?\n  /// Weather temperature in degrees Celsius\n  meteoTemperature Float?\n  /// Weather humidity percentage\n  meteoHumidite    Float?\n  /// Weather pressure in hPa\n  meteoPression    Float?\n  /// Wind speed in m/s\n  meteoVent        Float?\n  /// UV index\n  meteoUV          Float?\n\n  @@index([cultureId])\n  @@map(\"recoltes\")\n}\n",
  "inlineSchemaHash": "f05672128de4c269a264a2ed6c3685cf00d857262ca3a1e50ec7e07c5176e108",
  "copyEngine": true
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  const alternativePaths = [
    "src/lib/prisma/client",
    "lib/prisma/client",
  ]
  
  const alternativePath = alternativePaths.find((altPath) => {
    return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'))
  }) ?? alternativePaths[0]

  config.dirname = path.join(process.cwd(), alternativePath)
  config.isBundled = true
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Culture\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Universally unique identifier for the culture\"},{\"name\":\"nom\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Human‑readable name of the culture\"},{\"name\":\"img\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Filename of the illustration PNG stored in the `public` folder\"},{\"name\":\"categorie\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Categorie\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Category of the culture (fruit, legume, aromatique, fleur)\"},{\"name\":\"modeRecolte\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ModeRecolte\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"How harvests for this culture are measured (poids or poids_unite)\"},{\"name\":\"recoltes\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Recolte\",\"nativeType\":null,\"relationName\":\"CultureToRecolte\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"List of harvests associated with this culture\"}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false,\"documentation\":\"Defines the Culture table. A culture describes a plant variety you grow\\\\n(e.g. tomato, basil, rose). Each culture has a UUID primary key, a name,\\\\nan image filename (PNG) used for display, a category, and a harvesting\\\\nmode. A culture can have many harvests associated with it.\"},\"Recolte\":{\"dbName\":\"recoltes\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Universally unique identifier for the harvest\"},{\"name\":\"cultureId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Foreign key referencing the culture that was harvested\"},{\"name\":\"culture\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Culture\",\"nativeType\":null,\"relationName\":\"CultureToRecolte\",\"relationFromFields\":[\"cultureId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"The culture associated with this harvest\"},{\"name\":\"date\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Date and time of the harvest (ISO timestamp)\"},{\"name\":\"poids\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Weight of the harvest in grams; should always be provided\"},{\"name\":\"quantite\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Number of units harvested (only for cultures with modeRecolte=poids_unite)\"},{\"name\":\"meteoTemperature\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Weather temperature in degrees Celsius\"},{\"name\":\"meteoHumidite\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Weather humidity percentage\"},{\"name\":\"meteoPression\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Weather pressure in hPa\"},{\"name\":\"meteoVent\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"Wind speed in m/s\"},{\"name\":\"meteoUV\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false,\"documentation\":\"UV index\"}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false,\"documentation\":\"Defines the Recolte table. A recolte (harvest) records the details of a\\\\nspecific harvesting event: the culture harvested, the datetime, the\\\\nweight harvested (in grams), and optionally the number of units harvested\\\\nwhen the culture's mode is poids_unite. Weather data are stored\\\\nalongside the harvest to help analyse growing conditions.\"}},\"enums\":{\"Categorie\":{\"values\":[{\"name\":\"fruit\",\"dbName\":null},{\"name\":\"legume\",\"dbName\":null},{\"name\":\"aromatique\",\"dbName\":null},{\"name\":\"fleur\",\"dbName\":null}],\"dbName\":null,\"documentation\":\"Enumeration of the available culture categories. Each culture belongs to a\\\\nsingle category: fruit, legume (vegetable), aromatique (herb), or fleur\\\\n(flower). Defining the enum here allows type safety in the database and\\\\nthroughout your TypeScript code.\"},\"ModeRecolte\":{\"values\":[{\"name\":\"poids\",\"dbName\":null},{\"name\":\"poids_unite\",\"dbName\":null}],\"dbName\":null,\"documentation\":\"Enumeration of the different harvesting modes. `poids` indicates that a\\\\nharvest is measured purely by its weight. `poids_unite` indicates that a\\\\nharvest can be measured both by its weight and by the number of units\\\\ncollected (e.g. number of fruits or vegetables). When `poids_unite` is used\\\\nthe `Recolte.quantite` field should contain the unit count.\"}},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined


const { warnEnvConflicts } = require('./runtime/library.js')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

// file annotations for bundling tools to include these files
path.join(__dirname, "libquery_engine-darwin-arm64.dylib.node");
path.join(process.cwd(), "src/lib/prisma/client/libquery_engine-darwin-arm64.dylib.node")
// file annotations for bundling tools to include these files
path.join(__dirname, "schema.prisma");
path.join(process.cwd(), "src/lib/prisma/client/schema.prisma")
