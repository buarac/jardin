// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Generate the Prisma client into the src/lib/prisma directory so it can be
  // imported from your application code. You should avoid committing the
  // generated client to version control as it is auto‑generated and
  // regenerated whenever the schema changes. See the README for usage details.
  output   = "../src/lib/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enumeration of the available culture categories. Each culture belongs to a
/// single category: fruit, legume (vegetable), aromatique (herb), or fleur
/// (flower). Defining the enum here allows type safety in the database and
/// throughout your TypeScript code.
enum Categorie {
  fruit
  legume
  aromatique
  fleur
}

/// Enumeration of the different harvesting modes. `poids` indicates that a
/// harvest is measured purely by its weight. `poids_unite` indicates that a
/// harvest can be measured both by its weight and by the number of units
/// collected (e.g. number of fruits or vegetables). When `poids_unite` is used
/// the `Recolte.quantite` field should contain the unit count.
enum ModeRecolte {
  poids
  poids_unite
}

/// Defines the Culture table. A culture describes a plant variety you grow
/// (e.g. tomato, basil, rose). Each culture has a UUID primary key, a name,
/// an image filename (PNG) used for display, a category, and a harvesting
/// mode. A culture can have many harvests associated with it.
model Culture {
  /// Universally unique identifier for the culture
  id        String      @id @default(uuid())
  /// Human‑readable name of the culture
  nom       String
  /// Filename of the illustration PNG stored in the `public` folder
  img       String
  /// Category of the culture (fruit, legume, aromatique, fleur)
  categorie Categorie
  /// How harvests for this culture are measured (poids or poids_unite)
  modeRecolte ModeRecolte

  /// List of harvests associated with this culture
  recoltes   Recolte[]
}

/// Defines the Recolte table. A recolte (harvest) records the details of a
/// specific harvesting event: the culture harvested, the datetime, the
/// weight harvested (in grams), and optionally the number of units harvested
/// when the culture's mode is poids_unite. Weather data are stored
/// alongside the harvest to help analyse growing conditions.
model Recolte {
  /// Universally unique identifier for the harvest
  id          String   @id @default(uuid())
  /// Foreign key referencing the culture that was harvested
  cultureId   String
  /// The culture associated with this harvest
  culture     Culture  @relation(fields: [cultureId], references: [id])
  /// Date and time of the harvest (ISO timestamp)
  date        DateTime
  /// Weight of the harvest in grams; should always be provided
  poids       Float
  /// Number of units harvested (only for cultures with modeRecolte=poids_unite)
  quantite    Int?
  /// Weather temperature in degrees Celsius
  meteoTemperature Float?
  /// Weather humidity percentage
  meteoHumidite    Float?
  /// Weather pressure in hPa
  meteoPression    Float?
  /// Wind speed in m/s
  meteoVent        Float?
  /// UV index
  meteoUV          Float?

  @@index([cultureId])
  @@map("recoltes")
}
